import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*

class ComisDeceasedInterceptor {
	@DataContext('application')
	def em_app;
	
	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname=='deceased'}") 
	public void beforeCreate( evt ) {
		def deceased = evt.args[0];
		updateAgeInfo(deceased);
	}

	@Before(pattern="PersistenceService.update", eval="#{args[0]._schemaname=='deceased'}") 
	public void beforeUpdate( evt ) {
		def deceased = evt.args[0];
		updateAgeInfo(deceased);
	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname=='deceased'}") 
	public void beforeDelete( evt ) {
		def entity = evt.args[0]
		def app = em_app.select('objid,appno').find([deceased_objid: entity.objid]).first()
		if (app) {
			def msg = 'Record cannot be deleted. It is currently referenced by Application No. ' + app.appno + '.\n'
			msg += 'Delete the associated application instead.'
			throw new Exception(msg)
		}
		println 'before delete => ' + entity;
	}

	void updateAgeInfo(deceased) {
		if (deceased.agetype == 'DAY') {
			deceased.ageinmon = 0;
		} else if (deceased.agetype == 'YEAR') {
			deceased.ageinmon = deceased.age * 12;
		} else {
			deceased.ageinmon = deceased.age;
		}
	}
}